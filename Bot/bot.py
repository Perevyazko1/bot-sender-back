import asyncio
import json
import os
import re
import aioschedule
import redis
import requests
import random
from aiogram import Bot, Dispatcher
from aiogram import types
from aiogram.types import ParseMode
from aiogram.dispatcher.filters import IsReplyFilter, BoundFilter
from aiogram.types import WebAppInfo
from aiogram.utils import executor
from aiogram.utils.exceptions import (MessageCantBeDeleted,
                                      BotKicked)
from dotenv import load_dotenv

load_dotenv()
bot = Bot(token=os.getenv('TOKEN_BOT'))
dp = Dispatcher(bot)
redis_host = 'redis'
redis_port = 6379
redis_db = 0
redis_client = redis.Redis(host=redis_host, port=redis_port, db=redis_db)


async def check_and_send_notifications():
    while True:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É –∏–∑ Redis (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤ —Å —Ç–∞–π–º–∞—É—Ç–æ–º –≤ 1 —Å–µ–∫—É–Ω–¥—É)
        task_data = redis_client.blpop('tasks', timeout=1)
        if task_data:
            _, task_json = task_data
            task = json.loads(task_json.decode('utf-8'))
            chat_id = task['chat_ids']
            message_text = task['message_text']
        else:
            # –ï—Å–ª–∏ –∑–∞–¥–∞—á –Ω–µ—Ç, –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await asyncio.sleep(1)


@dp.message_handler(commands="start")
async def start(message: types.Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name} \n\n' '<i>–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–Ω—ã—Ö '
                         '—Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¢–û–õ–¨–ö–û –≤ –≥—Ä—É–ø–ø—É –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n\n'
                         '–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –≥—Ä—É–ø–ø—É –∏ –Ω–∞–∑–Ω–∞—á–∏—Ç—å '
                         '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.</i>\n\n'
                         '<b><u>–ó–ê–î–ê–ß–ò –ú–û–ñ–ï–¢ –í–´–°–¢–ê–í–õ–Ø–¢–¨ –¢–û–õ–¨–ö–û –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–† –ß–ê–¢–ê</u></b>',
                         parse_mode=types.ParseMode.HTML, disable_notification=True)


@dp.message_handler(commands="task_create")
async def task(message: types.Message):
    group = message.chat.id
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–†–∞–±–æ—Ç–∞ —Å –∑–∞–¥–∞—á–∞–º–∏", url=f"{os.getenv('URL_FRONT')}{group}",
                                          callback_data='copy_text'))
    # markup.add(types.InlineKeyboardButton("–æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É",web_app=WebAppInfo(url=f"https://perevyazko1.github.io/testprojectwebappbot/{group}")))
    await message.answer(f'–£–ø—Ä–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ üëá', reply_markup=markup, parse_mode=ParseMode.MARKDOWN)

    try:
        await message.delete()
    except MessageCantBeDeleted:
        await asyncio.sleep(1)


ANSWER_PHRASE = [
    'üñï',
    '–Ø –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∞—é —Å–≤–æ—é —Ä–∞–±–æ—Ç—É.',
    '–û—Ç–≤–∞–ª–∏—Ç–µ –æ—Ç –º–µ–Ω—è, —è –∑–∞–Ω—è—Ç.',
    'ü§¶‚Äç‚ôÇÔ∏è',
    'üòí',
    'ü§£',
    '–ü–∏***—Ç—å –Ω–µ –º–µ—à–∫–∏ –≤–æ—Ä–æ—á–∏—Ç—å)',
    '–ê –≤—ã —á–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Ç–æ? –°–æ–ª–Ω—Ü–µ –µ—â–µ –≤ –∑–µ–Ω–∏—Ç–µ)!',
    '–ù–µ —Å–µ–≥–æ–¥–Ω—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.',
    '–ì—Ä—É–±–æ, –Ω–æ —è—Å–Ω–æ.',
    '–°–æ—Ä—Ä–∏, —è –≤ –æ—Ç–ø—É—Å–∫–µ.',
    '–û–¥—É–º–∞–π—Ç–µ—Å—å, –ø–æ–∫–∞ –Ω–µ –ø–æ–∑–¥–Ω–æ.',
    '–ê –≤–∞–º –Ω–µ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ –∏–∑–ª–∏—à–Ω–µ?',
    '–ú–Ω–µ –Ω–µ –¥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤, –∑–∞–Ω—è—Ç –ø–æ–ª–µ–∑–Ω—ã–º–∏ –¥–µ–ª–∞–º–∏.',
    '–î–∞–≤–∞–π—Ç–µ –æ–±–æ–π–¥–µ–º—Å—è –±–µ–∑ –ª–∏—à–Ω–∏—Ö —É–≥–ª—É–±–ª–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥.',
    '–û–π, –∞ –≤—ã —á—Ç–æ, —Ö–æ—Ç–∏—Ç–µ –º–µ–Ω—è –∑–∞–≥–æ–≤–æ—Ä–∏—Ç—å?',
    '–ù—É —á—Ç–æ —Ç—É—Ç —É –Ω–∞—Å? –ù–µ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫ –∂–µ, –ø—Ä–∞–≤–¥–∞?',
    '–°–∫–∞–∂–∏—Ç–µ –º–Ω–µ —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞ —Ç–æ —è –≤—è–ª–æ –¥–µ–ª–∞—é –≤–∏–¥, —á—Ç–æ listening.',
    '–û–≥–æ, —Ç–∞–∫ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–π—Ç–µ –¥–∞–ª—å—à–µ, –≤—Å–µ —Ç–∞–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!',
    '–õ–æ–≤–ª—é –∫–∞–∂–¥—É—é –≤–∞—à—É –º—ã—Å–ª—å, –Ω–µ –±–µ—Å–ø–æ–∫–æ–π—Ç–µ—Å—å.',
    '–ö–∞–∫ –≤—ã –∏ –≥–æ–≤–æ—Ä–∏–ª–∏ - —É–º–Ω–∞—è —Ä–µ–ø–ª–∏–∫–∞ –∑–∞ —É–º–Ω–æ–π!',
    '–ê –≤—ã –∫–∏–Ω–æ–∑–≤–µ–∑–¥–∞ –∏–ª–∏ –µ—â–µ —á—Ç–æ-—Ç–æ? –û–ø—è—Ç—å –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–π –º–æ–Ω–æ–ª–æ–≥.',
    '–û, —ç—Ç–æ –∑–≤—É—á–∏—Ç —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ!',
    '–Ø –≤–∞–º –Ω–µ —Å–∫–∞–∂—É, —á—Ç–æ –≤—ã –≥–µ–Ω–∏–π... –•–æ—Ç—è, –ø–æ—á–µ–º—É –±—ã –∏ –Ω–µ—Ç?',
    '–í—ã –ø—Ä–æ–±—É–µ—Ç–µ –º–µ–Ω—è –≤—ã–≤–µ—Å—Ç–∏ –∏–∑ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è? –£ –≤–∞—Å –ø–æ—á—Ç–∏ –ø–æ–ª—É—á–∞–µ—Ç—Å—è.',
    '–ö–∞–∫ —è —Å–º–µ—é—Å—å –ø—Ä–∏ –≤–∏–¥–µ —Ç–∞–∫–∏—Ö —à—É—Ç–æ–∫? –î–∞ –∫–∞–∫ –º–æ–≥—É, –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!',
    '–í–∏–Ω–µ–≥—Ä–µ—Ç –∏–∑ —Å–ª–æ–≤ –∏ —é–º–æ—Ä–∞, —è –≥–æ—Ç–æ–≤! –ß—Ç–æ —É –≤–∞—Å –µ—â–µ –≤ –∑–∞–ø–∞—Å–∞—Ö?',
    '–û, —Ç–∞–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —á—Ç–æ —è —á—É—Ç—å –Ω–µ –∑–∞—Å–Ω—É–ª. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ "–≤–¥—É–≤–∞—Ç—å"!',
    '–í—ã –±—ã –º–æ–≥–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —à–æ—É-–±–∏–∑–Ω–µ—Å–µ! –õ–∏—Ü–µ–¥–µ–π—Å—Ç–≤–æ - –≤–∞—à–µ –ø—Ä–∏–∑–≤–∞–Ω–∏–µ!',
    '–î–∞–π –±–æ–≥ –≤—Å–µ–º –∏–º–µ—Ç—å —Ç–∞–∫–æ–µ –º–Ω–µ–Ω–∏–µ –æ —Å–µ–±–µ, –∫–∞–∫ —É –≤–∞—Å!',
    '–ß–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä—è, —è –Ω–µ –∑—Ä—è –∂–¥–∞–ª, —á—Ç–æ–±—ã –≤—ã —ç—Ç–æ —Å–∫–∞–∑–∞–ª–∏. –ó–∞—Ü–µ–ø–∏–ª–∏ –º–µ–Ω—è!',
    '–î–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º —Å—Ç–∞–≤–∫—É: –≤—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç–µ, –∞ —è –¥–µ–ª–∞—é –≤–∏–¥, —á—Ç–æ —Å–ª—É—à–∞—é!',
    '–í—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–¥–∞—Ä–∏–ª–∏ –º–Ω–µ —á—É–≤—Å—Ç–≤–æ —É–º–∏–ª–µ–Ω–∏—è. –≠—Ç–æ –¥–æ–ª–∂–Ω–æ —á—Ç–æ-—Ç–æ –∑–Ω–∞—á–∏—Ç—å!',
    '–ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å? –Ø –±—ã–ª —Å–ª–∏—à–∫–æ–º –∑–∞—Ö–≤–∞—á–µ–Ω —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏.',
    '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—É—é —Ñ—Ä–∞–∑—É –Ω—É–∂–Ω–æ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å. –ù—É, –∏–ª–∏ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å. –í–ø—Ä–æ—á–µ–º, –≤—Å–µ —Ä–∞–≤–Ω–æ.',
]


@dp.message_handler()
async def handle_message(message: types.Message):
    modified_text = re.sub(r"(https://www\.)(instagram\.com/.+)", r"\1dd\2", message.text)
    group = message.chat.id
    if modified_text != message.text:
        await message.answer(modified_text)
        try:
            await message.delete()
        except MessageCantBeDeleted:
            await asyncio.sleep(1)
    elif message.reply_to_message is not None and message.reply_to_message.from_user.id == bot.id  and group == -1002066951225:
        await message.answer(text=random.choice(ANSWER_PHRASE))


@dp.message_handler()
async def load_task(chat_id_group, text_task):
    try:
        await dp.bot.send_message(chat_id=chat_id_group, text=text_task)
        await asyncio.sleep(1)
    except BotKicked:
        await asyncio.sleep(1)


async def send_task():
    url = f"{os.getenv('SERVER_IP')}/app/get_all_task/"

    response = requests.get(url)

    if response.status_code == 200:
        sql_tasks = response.json()  # –ü–∞—Ä—Å–∏–Ω–≥ JSON-–¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
        day_mapping = {
            '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ': aioschedule.every().day,
            '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': aioschedule.every().monday,
            '–í—Ç–æ—Ä–Ω–∏–∫': aioschedule.every().tuesday,
            '–°—Ä–µ–¥–∞': aioschedule.every().wednesday,
            '–ß–µ—Ç–≤–µ—Ä–≥': aioschedule.every().thursday,
            '–ü—è—Ç–Ω–∏—Ü–∞': aioschedule.every().friday,
            '–°—É–±–±–æ—Ç–∞': aioschedule.every().saturday,
            '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': aioschedule.every().sunday,
        }
        for task in sql_tasks:
            day_of_week = task.get('day_of_week')
            if day_of_week in day_mapping:
                day_mapping[day_of_week].at(time_str=task.get('time')).do(load_task, task.get('chat_id'),
                                                                          task.get('task')).tag(f'{task.get("id")}')
            else:
                print(f"Unsupported day of the week: {day_of_week}")
    else:
        print('Request failed with status code:', response.status_code)
    while True:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É –∏–∑ Redis (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤ —Å —Ç–∞–π–º–∞—É—Ç–æ–º –≤ 1 —Å–µ–∫—É–Ω–¥—É)
        create_tasks = redis_client.blpop('create_tasks', timeout=1)
        delete_tasks = redis_client.blpop('delete_tasks', timeout=1)
        day_mapping = {
            '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ': aioschedule.every().day,
            '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': aioschedule.every().monday,
            '–í—Ç–æ—Ä–Ω–∏–∫': aioschedule.every().tuesday,
            '–°—Ä–µ–¥–∞': aioschedule.every().wednesday,
            '–ß–µ—Ç–≤–µ—Ä–≥': aioschedule.every().thursday,
            '–ü—è—Ç–Ω–∏—Ü–∞': aioschedule.every().friday,
            '–°—É–±–±–æ—Ç–∞': aioschedule.every().saturday,
            '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': aioschedule.every().sunday,
        }

        if create_tasks:
            _, task_json = create_tasks
            task = json.loads(task_json.decode('utf-8'))
            day_of_week = task.get('day_of_week')
            day_mapping[day_of_week].at(time_str=task.get('time')).do(load_task, task.get('chat_id'),
                                                                      task.get('task')).tag(f'{task.get("id")}')
        if delete_tasks:
            _, task_json = delete_tasks
            task = json.loads(task_json.decode('utf-8'))
            aioschedule.clear(f'{task.get("id")}')
        else:
            # –ï—Å–ª–∏ –∑–∞–¥–∞—á –Ω–µ—Ç, –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await asyncio.sleep(1)

        await aioschedule.run_pending()
        await asyncio.sleep(1)


async def on_startup(dp):
    asyncio.create_task(send_task())


if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup)
